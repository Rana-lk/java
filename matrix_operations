import java.util.Scanner;
public class matrixop {
    int a[][],c[][];
    int m,n;

    //create a matrix
    void create()
    {
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter number of rows : ");
        n=sc.nextInt();
        System.out.print("Enter number of columns : ");
        m=sc.nextInt();
        a=new int[n][m];
     
        System.out.print("Enter the values of the matrix :");
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                a[i][j]=sc.nextInt();
            }
        }
    }

    //perform addition
    void add(matrixop m1,matrixop m2)
    {
        if(m1.n!=m2.n || m1.m!=m2.m)
        {
            System.out.println("Matrix addition is not possible !");
        }
        else
        {
            c=new int[m1.n][m1.m];
            for(int i=0;i<m1.n;i++)
            {
                for(int j=0;j<m1.m;j++)
                {
                    
                    c[i][j]=m1.a[i][j]+m2.a[i][j];
                }
            }
        System.out.println("After addition :");
            display(c,m1.n,m1.m);
        }
        
    }

    //perform subtraction
    void subtract(matrixop m1,matrixop m2)
    {
        if(m1.n!=m2.n || m1.m!=m2.m)
        {
            System.out.println("Matrix subtration  is not possible !");
        }
        else
        {
            c=new int[m1.n][m1.m];
            for(int i=0;i<m1.n;i++)
            {
                for(int j=0;j<m1.m;j++)
                {
                    
                    c[i][j]=m1.a[i][j] - m2.a[i][j];
                }
            }
        System.out.println("After Subtraction :");
           display(c,m1.n,m1.m);
        }
    }
    // display
   void display(int c[][],int n,int m)
    {
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                System.out.print(c[i][j]+" ");
            }
            System.out.println();
        }
    }
    // find transpose
    void transpose(matrixop M)
    {
        c=new int[M.n][M.m];
        for(int i=0;i<M.n;i++)
        {
            for(int j=0;j<M.m;j++)
            {
                c[j][i]=M.a[i][j];
            }
        }
        System.out.println("Given matrix transpose is :");
        display(c,M.m,M.n);
    }
    // perform multiplication
    void multiplication(matrixop m1,matrixop m2)
    {
        c=new int[m1.n][m2.m];
        if(m1.m!=m2.n )
        {
            System.out.println("Given matrix cannot multiply");
        }
        else 
        {
            for(int i=0;i<m1.n;i++)
            {
                for(int j=0;j<m2.m;j++)
                {
                    for(int k=0;k<m1.m;k++)
                    {
                       c[i][j] += m1.a[i][k] * m2.a[k][j];
                    }
                }
            }
            System.out.println("After Multiplication");
            display(c,m1.n,m2.m);
        }
    }

    // check symmetry
    void symmetric(matrixop m1)
    {
        boolean is_symmetric=true;
        if(m1.m!=m1.n)
        {
            System.out.print("Square matrix can only check the symmetry of the matrix ");
        }
        else
        {
        for(int i=0;i<m1.n;i++)
        {
            for(int j=0;j<m1.m;j++)
            {
                if(m1.a[i][j]!=m1.a[j][i])
                {
                    is_symmetric=false;
                }
            }
        }
        if(!is_symmetric)
        {
            System.out.println("Given matrix is not symmetric ");
        }
        else
        {
            System.out.println("Given matrix is symmetric ");
        }
        }
    }

    
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        boolean check=true;
        matrixop m1=new matrixop();
        matrixop m2=new matrixop();
        matrixop result=new matrixop();
        while(check)
        {
            System.out.println("Matrix operations are : \n1. Matrix addition\n2. Matrix subtraction  \n3. Matrix multiplication \n4. Check symnmetry\n5. Matrix transpose \n6. Exit\n");
            System.out.print("Enter your choice :");
            int ch=sc.nextInt();
            switch(ch)
            {
            case 1:
                m1.create();
                m2.create();
                result.add(m1,m2);
                break;

            case 2:
                m1.create();
                m2.create();
                result.subtract(m1,m2);
                break;


            case 3:
                m1.create();
                m2.create();
                result.multiplication(m1,m2);
                break;

            case 4:
                System.out.println("To check the symmetry of a matrix :");
                m1.create();
                result.symmetric(m1);
                break;

            case 5:
                System.out.println("To check the transpose of the matrix :");
                m1.create();
                result.transpose(m1);
                break;
            
            case 6:
                System.out.print("Exiting ");
                check=false;
                break;

            default:
                System.out.print("Invalid choice ");
            }
    }
    sc.close();
}

}
